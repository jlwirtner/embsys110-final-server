"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("./Fw.js"),
    fw = _require.fw,
    FW = _require.FW;

"use strict";

// Base class of all events in the system.

var Evt = function () {
    function Evt() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : FW.UNDEF;
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FW.UNDEF;
        var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : FW.UNDEF;
        var seq = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

        _classCallCheck(this, Evt);

        this.type = type;
        this.to = to;
        this.from = from;
        this.seq = seq;
    }

    _createClass(Evt, [{
        key: "clear",
        value: function clear() {
            this.type = FW.UNDEF;
            this.to = FW.UNDEF;
            this.from = FW.UNDEF;
            this.seq = 0;
        }
    }]);

    return Evt;
}();

// Error or status events.


var ErrorEvt = function (_Evt) {
    _inherits(ErrorEvt, _Evt);

    function ErrorEvt() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : FW.UNDEF;
        var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FW.UNDEF;
        var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : FW.UNDEF;
        var seq = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var error = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : FW.ERROR_SUCCESS;
        var origin = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : FW.UNDEF;
        var reason = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : FW.REASON_UNSPEC;

        _classCallCheck(this, ErrorEvt);

        var _this = _possibleConstructorReturn(this, (ErrorEvt.__proto__ || Object.getPrototypeOf(ErrorEvt)).call(this, type, to, from, seq));

        _this.error = error;
        _this.origin = origin;
        _this.reason = reason;
        return _this;
    }

    return ErrorEvt;
}(Evt);

module.exports = {
    Evt: Evt,
    ErrorEvt: ErrorEvt
};