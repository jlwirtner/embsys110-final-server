'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Emitter = require('tiny-emitter');

"use strict";

var FW = {
    UNDEF: 'UNDEF',

    ERROR_SUCCESS: 'SUCCESS', // No error, success.
    ERROR_UNSPEC: 'UNSPEC', // Unspecified.
    ERROR_TIMEOUT: 'TIMEOUT', // Timeout.
    ERROR_HAL: 'HAL', // HAL driver error.
    ERROR_HARDWARE: 'HARDWARE', // Hardware error.
    ERROR_HSMN: 'HSM', // Invalid HSMN.
    ERROR_STATE: 'STATE', // Invalid state.
    ERROR_UNAVAIL: 'UNAVAIL', // Resource unavailable, busy.
    ERROR_PARAM: 'PARAM', // Invalid parameter, out of range.

    REASON_UNSPEC: 'UNSPEC'
};

var Fw = function () {
    function Fw() {
        _classCallCheck(this, Fw);

        this.map = new Map();
        this.emitter = new Emitter();
    }

    _createClass(Fw, [{
        key: 'print',
        value: function print() {
            console.log("Gallium Studio Framework");
        }
    }, {
        key: 'add',
        value: function add(hsm) {
            //console.log(`adding ${hsm.name}`)
            this.map.set(hsm.name, hsm);
            this.emitter.on(hsm.name, hsm.handler);
        }
    }, {
        key: 'post',
        value: function post(e) {
            var hsm = this.map.get(e.to);
            if (hsm) {
                //console.log(`hsm found ${hsm.name}`)
                this.emitter.emit(hsm.name, e);
            } else {
                console.log('Failed to post event to ' + e.to + ':');
                console.log(e);
            }
        }
    }, {
        key: 'assert',
        value: function assert(c) {
            if (!c) {
                throw new Error('assert failed');
            }
        }
    }]);

    return Fw;
}();

module.exports = {
    fw: new Fw(),
    FW: Object.freeze(FW)
};