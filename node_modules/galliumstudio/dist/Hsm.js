'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("xstate"),
    Machine = _require.Machine,
    actions = _require.actions;

var _require2 = require('xstate/lib/interpreter'),
    interpret = _require2.interpret;

var Emitter = require('tiny-emitter');

var _require3 = require("./Fw.js"),
    fw = _require3.fw,
    FW = _require3.FW;

var _require4 = require("./Evt.js"),
    Evt = _require4.Evt,
    ErrorEvt = _require4.ErrorEvt;

var _require5 = require("./Log.js"),
    _log = _require5.log;

"use strict";

// Base class of all HSMs in the system.

var Hsm = function () {
    function Hsm(name, ctx, config) {
        var _this = this;

        _classCallCheck(this, Hsm);

        this.name = name;
        this.nextSeq = 0;
        this.seqMap = new Map(); // Map of outgoing sequence.
        this.internalQ = [];
        this.qMap = new Map(); // Map of defer queues.
        this.stateMap = new Map(); // Map of current states of all regions

        config.context = ctx;
        this.machine = Machine(config);
        this.interpreter = interpret(this.machine);
        this.emitter = new Emitter();
        this.handler = function (e) {
            // @todo Fix for browser.
            process.nextTick(function () {
                //console.log(`got event ${e.type}`)
                _this.interpreter.send(e);
                var ie = void 0;
                while (ie = _this.internalQ.pop()) {
                    _this.interpreter.send(ie);
                }
            });
        };
    }

    _createClass(Hsm, [{
        key: 'start',
        value: function start() {
            fw.add(this);
            _log.on(this.name);
            this.interpreter.init();
        }
    }, {
        key: 'genSeq',
        value: function genSeq() {
            var seq = this.nextSeq++;
            if (this.nextSeq > 0xFFFF) this.nextSeq = 0;
            return seq;
        }
    }, {
        key: 'send',
        value: function send(e) {
            e.from = this.name;
            fw.post(e);
        }
    }, {
        key: 'sendReq',
        value: function sendReq(e, to) {
            e.to = to;
            e.seq = this.genSeq();
            this.seqMap.set(e.to, e.seq);
            this.send(e);
        }
    }, {
        key: 'sendCfm',
        value: function sendCfm(e, orig) {
            e.to = orig.from;
            e.seq = orig.seq;
            this.send(e);
            orig.clear();
        }
    }, {
        key: 'sendInd',
        value: function sendInd(e, to) {
            this.sendReq(e, to);
        }
    }, {
        key: 'sendRsp',
        value: function sendRsp(e, orig) {
            this.sendCfm(e, orig);
        }
    }, {
        key: 'raise',
        value: function raise(e) {
            e.to = this.name;
            e.from = this.name;
            this.internalQ.push(e);
        }
    }, {
        key: 'defer',
        value: function defer(q, e) {
            var deferQ = void 0;
            if (!this.qMap.has(q)) {
                deferQ = [];
                this.qMap.set(q, deferQ);
            } else {
                deferQ = this.qMap.get(q);
            }
            deferQ.push(e);
            console.log('pushing evt ' + deferQ.length);
        }
    }, {
        key: 'recall',
        value: function recall(q) {
            if (this.qMap.has(q)) {
                var deferQ = this.qMap.get(q);
                var e = void 0;
                while (e = deferQ.pop()) {
                    console.log('popping evt ' + deferQ.length);
                    this.internalQ.push(e);
                }
            }
        }
        // Matches seq in event against those stored in seqMap.

    }, {
        key: 'matchSeq',
        value: function matchSeq(e) {
            var seq = this.seqMap.get(e.from);
            return e !== undefined && e.seq === seq;
        }
        // Clears seq in seqMap and returns true if all seq cleared.

    }, {
        key: 'clearSeq',
        value: function clearSeq(e) {
            this.seqMap.delete(e.from);
            return this.seqMap.size === 0;
        }
    }, {
        key: 'resetSeqMap',
        value: function resetSeqMap() {
            this.seqMap.clear();
        }
    }, {
        key: 'error',
        value: function error() {
            for (var _len = arguments.length, msg = Array(_len), _key = 0; _key < _len; _key++) {
                msg[_key] = arguments[_key];
            }

            _log.error.apply(_log, [this.name].concat(msg));
        }
    }, {
        key: 'warning',
        value: function warning() {
            for (var _len2 = arguments.length, msg = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                msg[_key2] = arguments[_key2];
            }

            _log.warning.apply(_log, [this.name].concat(msg));
        }
    }, {
        key: 'critical',
        value: function critical() {
            for (var _len3 = arguments.length, msg = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                msg[_key3] = arguments[_key3];
            }

            _log.critical.apply(_log, [this.name].concat(msg));
        }
    }, {
        key: 'log',
        value: function log() {
            for (var _len4 = arguments.length, msg = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                msg[_key4] = arguments[_key4];
            }

            _log.log.apply(_log, [this.name].concat(msg));
        }
    }, {
        key: 'info',
        value: function info() {
            for (var _len5 = arguments.length, msg = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                msg[_key5] = arguments[_key5];
            }

            _log.info.apply(_log, [this.name].concat(msg));
        }

        // @param state - State name  in the format of 'region.state'.
        //                If 'region.' is ommited, it is default to 'main'.

    }, {
        key: 'state',
        value: function state(_state) {
            var region = 'main';
            var match = /^([^.]+)\.([^.]+)$/.exec(_state);
            if (match) {
                region = match[1];
                _state = match[2];
            }
            this.stateMap.set(region, _state);
            _log.log(this.name, 'Enter ' + region + '.' + _state);
        }
    }, {
        key: 'getState',
        value: function getState(region) {
            return this.stateMap.get(region || 'main');
        }
    }, {
        key: 'getStates',
        value: function getStates() {
            return '[' + Array.from(this.stateMap.values()).join(', ') + ']';
        }
    }, {
        key: 'event',
        value: function event(e) {
            var msg = 'Event ' + e.type + ' from ' + e.from + ' seq=' + e.seq;
            if (e instanceof ErrorEvt) {
                msg += ' (error=' + e.error + ' origin=' + e.origin + ' reason=' + e.reason + ')';
            }
            _log.log(this.name, msg);
        }
    }]);

    return Hsm;
}();

module.exports = {
    Hsm: Hsm
};