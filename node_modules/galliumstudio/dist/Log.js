'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('./Fw.js'),
    fw = _require.fw,
    FW = _require.FW;

var LOG = {
    TYPE_ERROR: 0,
    TYPE_WARNING: 1,
    TYPE_CRITICAL: 2,
    TYPE_LOG: 3,
    TYPE_INFO: 4
};

var logType = ['<ERROR>', '<WARNING>', '<CRITICAL>', '<LOG>', '<INFO>'];

// Verbosity
// 0 - All debug out disabled.
// 1 - Shows ERROR (Type 0).
// 2 - Shows ERROR, WARNING (Type 0-1).
// 3 - Shows ERROR, WARNING, CRITICAL (Type 0-2).
// 4 - Shows ERROR, WARNING, CRITICAL, LOG (Type 0-3).
// 5 - Shows ERROR, WARNING, CRITICAL, LOG, INFO (Type 0-4).

var Log = function () {
    function Log() {
        _classCallCheck(this, Log);

        this.verbosity = 5;
        this.enabledHsm = [];
    }

    _createClass(Log, [{
        key: 'on',
        value: function on(name) {
            if (typeof name === 'string' && !this.enabledHsm.includes(name)) {
                this.enabledHsm.push(name);
            }
        }
    }, {
        key: 'off',
        value: function off(name) {
            var idx = this.enabledHsm.indexOf(name);
            if (idx != -1) {
                this.enabledHsm.splice(idx, 1);
            }
        }
    }, {
        key: 'onAll',
        value: function onAll() {
            var _this = this;

            fw.map.forEach(function (hsm, name) {
                _this.on(name);
            });
        }
    }, {
        key: 'offAll',
        value: function offAll() {
            var _this2 = this;

            fw.map.forEach(function (hsm, name) {
                _this2.off(name);
            });
        }
    }, {
        key: 'isOutput',
        value: function isOutput(type, name) {
            return type < this.verbosity && this.enabledHsm.includes(name);
        }
    }, {
        key: 'debug',
        value: function debug(type, name) {
            if (this.isOutput(type, name)) {
                var _console;

                var date = new Date();
                var ts = date.getTime() - date.getTimezoneOffset() * 60 * 1000;
                var msPerDay = 3600 * 24 * 1000;
                var timeStr = Math.floor(ts / msPerDay) + ':' + ts % msPerDay;

                for (var _len = arguments.length, msg = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                    msg[_key - 2] = arguments[_key];
                }

                (_console = console).log.apply(_console, [timeStr + ' ' + logType[type] + ' ' + name + ':'].concat(msg));
            }
        }
    }, {
        key: 'error',
        value: function error(name) {
            for (var _len2 = arguments.length, msg = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                msg[_key2 - 1] = arguments[_key2];
            }

            this.debug.apply(this, [LOG.TYPE_ERROR, name].concat(msg));
        }
    }, {
        key: 'warning',
        value: function warning(name) {
            for (var _len3 = arguments.length, msg = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                msg[_key3 - 1] = arguments[_key3];
            }

            this.debug.apply(this, [LOG.TYPE_WARNING, name].concat(msg));
        }
    }, {
        key: 'critical',
        value: function critical(name) {
            for (var _len4 = arguments.length, msg = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                msg[_key4 - 1] = arguments[_key4];
            }

            this.debug.apply(this, [LOG.TYPE_CRITICAL, name].concat(msg));
        }
    }, {
        key: 'log',
        value: function log(name) {
            for (var _len5 = arguments.length, msg = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
                msg[_key5 - 1] = arguments[_key5];
            }

            this.debug.apply(this, [LOG.TYPE_LOG, name].concat(msg));
        }
    }, {
        key: 'info',
        value: function info(name) {
            for (var _len6 = arguments.length, msg = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
                msg[_key6 - 1] = arguments[_key6];
            }

            this.debug.apply(this, [LOG.TYPE_INFO, name].concat(msg));
        }
    }, {
        key: 'print',
        value: function print() {
            var _console2;

            (_console2 = console).log.apply(_console2, arguments);
        }
    }]);

    return Log;
}();

module.exports = {
    log: new Log(),
    LOG: Object.freeze(LOG)
};