"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require("./Fw.js"),
    fw = _require.fw,
    FW = _require.FW;

var _require2 = require("./Evt.js"),
    Evt = _require2.Evt;

"use strict";

// Base class of system timers.

var Timer = function () {
    function Timer(hsm, type) {
        _classCallCheck(this, Timer);

        this.hsm = hsm;
        this.type = type;
        this.isPeriodic = false;
        this.id = null;
        this.seq = 0;
    }

    _createClass(Timer, [{
        key: "start",
        value: function start(timeoutMs) {
            var _this = this;

            var isPeriodic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            this.stop();
            this.isPeriodic = isPeriodic;
            var timerfn = setTimeout;
            if (isPeriodic) {
                timerfn = setInterval;
            }
            this.id = timerfn(function () {
                var e = new Evt(_this.type, _this.hsm, FW.HSM_UNDDEF, _this.seq);
                fw.post(e);
            }, timeoutMs);
        }
    }, {
        key: "stop",
        value: function stop() {
            if (this.id == null) return;
            var timerfn = clearTimeout;
            if (this.isPeriodic) {
                timerfn = clearInterval;
            }
            timerfn(this.id);
            this.id = null;
            this.seq++;
            if (this.seq > 0xFFFF) this.seq = 0;
        }
    }, {
        key: "isValid",
        value: function isValid(e) {
            return e.seq === this.seq;
        }
    }]);

    return Timer;
}();

module.exports = {
    Timer: Timer
};